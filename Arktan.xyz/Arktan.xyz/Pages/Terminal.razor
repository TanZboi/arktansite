@page "/"
@inject IJSRuntime JSRuntime

<div class="terminal">
    <div class="output" id="terminal-output">
        @foreach (var line in outputLines)
        {
            <p>@line</p>
        }
    </div>

    <div class="input-line">
        <span class="prompt">$ </span>
        <input @bind="currentInput" @bind:event="oninput" @onkeydown="HandleKeyDown" class="input" />
        <span class="cursor">â–ˆ</span>
    </div>
</div>


@code {
    private bool isTyping = false;
    private string typingBuffer = "";
    private int typingIndex = 0;
    private string lastCommand = "";
    
    
    private List<string> outputLines = new();
    private string currentInput = "";

    private void HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            ProcessCommand(currentInput);
            currentInput = "";
        }
    }
    
    private ElementReference outputDiv;

    private async Task ScrollToBottom()
    {
        await JSRuntime.InvokeVoidAsync("scrollToBottom", outputDiv); // Scroll to the bottom of the output
    }

    private async Task ProcessCommand(string command)
    {
        if (isTyping) return;

        lastCommand = "$ " + command;
        outputLines.Add(lastCommand);
        StateHasChanged();
        
        if (command == "clear")
        {
            outputLines.Clear(); // Completely wipe terminal output
            StateHasChanged();
            await JSRuntime.InvokeVoidAsync("triggerPulse");
            return; // Exit early to prevent processing further
        }
        
        if (command == "art")
        {
            await JSRuntime.InvokeVoidAsync("redirectToArtPage");
            return; // Stop processing further since we're redirecting
        }

        // ðŸŸ¢ Ensure both scroll and pulse are triggered
        await JSRuntime.InvokeVoidAsync("triggerPulse");
        await JSRuntime.InvokeVoidAsync("scrollToBottom");

        isTyping = true;
        List<string> responseLines = GetResponse(command);

        foreach (var line in responseLines)
        {
            typingBuffer = line;
            typingIndex = 0;

            outputLines.Add(""); 
            int currentIndex = outputLines.Count - 1;

            await TypeOutText(currentIndex);

            // Keep scrolling to bottom after each typed line
            await JSRuntime.InvokeVoidAsync("scrollToBottom");
        }

        isTyping = false;
    }





    private async Task TypeOutText(int index)
    {
        string currentText = "";
        while (typingIndex < typingBuffer.Length)
        {
            currentText += typingBuffer[typingIndex]; // Add next letter
            outputLines[index] = currentText; // Update the correct line in outputLines
            StateHasChanged();

            await Task.Delay(15); // Adjust speed here (50ms per letter)
            typingIndex++;
        }
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("focusTerminalInput");
        }
    }


    
    private List<string> GetResponse(string command)
    {
        return command switch
        {
            "contact" => new List<string>
            {
                "Email: bill@arktan.xyz",
                "Discord: Arktanz",
                "bluesky: @natkraart.bsky.social",
                "deviantart: @natkra",
                "Fa: natkra",
                "reddit: u/thatmako",
                "youtube: Arktan",
                "soundcloud: Arktan",
                "github: TanZboi",
                "website: arktan.xyz"
            },
            "clear" => new List<string>(), // Special case for clearing output
            "help" => new List<string>
            {
                "Available commands:",
                "contact - Show contact information",
                "art - view art",
                "commission - view commission information",
                "music - redirect to my music",
                "about - Show information about me",
                "clear - Clear the terminal",
                "background - Change the background shader",
                "help - Show available commands"
            },
            "art" => new List<string> { "[Redirecting to artwork page...]" }, // Shows a message before redirecting
            _ => new List<string> { "Unknown command. Try 'help'." },
        };
    }
}
